import pygetwindow as gw
import keyboard
import speech_recognition as sr
import requests

import httpx
import threading
import time
import json
from deepgram import DeepgramClient, LiveTranscriptionEvents, LiveOptions, DeepgramClientOptions

DEEPGRAM_API_KEY = '8b553373597f3b4130540115652ab67c73835eb8'



def continuously_listen_and_send():
    global dg_connection  # Use the global connection variable
    # Initialize the recognizer
    r = sr.Recognizer()
    
    # Open the microphone for listening
    with sr.Microphone() as source:
        # Adjust the recognizer sensitivity to ambient noise
        r.adjust_for_ambient_noise(source)
        print("Listening continuously...")
        while True:
            print("Waiting for the audio")
            try:
                audio_data = r.listen(source, timeout=3)
                print("Processing audio...")
                # Plot the waveform of the captured audio
                # plot_audio_waveform(audio_data.get_wav_data())
                
                # Here, you would also send the audio to Deepgram
                send_audio_to_deepgram(audio_data)
                print("Audio sent to Deepgram")
                
            except sr.WaitTimeoutError:
                print("No audio detected, continuing to listen...")

def send_audio_to_deepgram(audio_data):
    print("Sending audio to Deepgram")
    global dg_connection  # Use the global connection variable
    try:
        # Define event handlers
        def on_message(self, result, **kwargs):
            sentence = result.channel.alternatives[0].transcript
            if len(sentence) > 0:
                print(f"Transcribed text: {sentence}")
                # Insert the transcribed text using keyboard library
                keyboard.write(sentence, delay=0.01)

        def on_error(self, error, **kwargs):
            print(f"An error occurred: {error}")
            dg_connection = None
            # Attempt to reconnect if an error occurs
            establish_connection()

        # Establish or maintain the connection
        def establish_connection(wave_data):
            global dg_connection
            print("Trying to establish connection.", dg_connection)
            # global dg_connection
            if dg_connection is None:
                dg_connection = deepgram.listen.live.v("1")
                # Register event handlers
                dg_connection.on(LiveTranscriptionEvents.Transcript, on_message)
                dg_connection.on(LiveTranscriptionEvents.Error, on_error)

                # Configure Deepgram options for live transcription
                options = LiveOptions(
                    model="nova-2", 
                    language="en-US", 
                    smart_format=True,
                    punctuate=True,
                    interim_results=True
                )

                # Start the connection
                dg_connection.start(options)
                dg_connection.send(wave_data)
            else:
                # Send a KeepAlive request if the connection is already established
                dg_connection.send(json.dumps({"type": "KeepAlive"}))

        # Ensure the connection is established or maintained
        establish_connection(audio_data.get_wav_data())

        # Send the audio data to Deepgram
        # dg_connection.send(audio_data.get_wav_data())

    except Exception as e:
        print(f"An error occurred while sending audio to Deepgram: {e}")
        # Attempt to reconnect if an exception occurs
        establish_connection()


def transcribe_audio_and_insert():
    # Start continuous listening and sending audio data to Deepgram
    continuously_listen_and_send()

# Define the hotkeys and their actions
def setup_hotkeys():
    print("Adding the hotkey")
    keyboard.add_hotkey('ctrl+alt+a', transcribe_audio_and_insert)  # Changed hotkey as per new requirement

# Setup and start listening
# setup_hotkeys()
continuously_listen_and_send()
# transcribe_audio_and_insert()
print("Script is running. Press CTRL+C in the console to stop.")

# Keep the script running
keyboard.wait()

